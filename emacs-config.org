#+TITLE: All .emacs configurations
#+AUTHOR: Abhisek Panigrahi
#+PROPERTY: header-args :tangle yes

* Themes
  :DRAWER:
  Link: https://melpa.org/#/monotropic-theme
  :END:
  #+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa")
  (load-theme 'monotropic t)
  #+end_src

** Fonts
   #+begin_src emacs-lisp
   (use-package all-the-icons
     :if (display-graphic-p)
     :config
     (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
   #+end_src

* Org Mode
  :DRAWER:
  link: [[https://lists.gnu.org/archive/html/emacs-orgmode/2011-06/msg00712.html]]
  :END:
  #+begin_src emacs-lisp
    ;;(use-package org
    ;;  :config
    (fset 'getlink
	  (lambda (&optional arg) 
	    "Keyboard macro." 
	    (interactive "p") 
	    (kmacro-exec-ring-item (quote ("\C-c\C-l\C-a\C-k\C-g" 0 "%d")) arg)))
    (define-key org-mode-map (kbd "C-c l") #'getlink)
  #+end_src


** Org Agenda
   #+begin_src emacs-lisp
   (global-set-key (kbd "C-c a") 'org-agenda)
   #+end_src

** Org Journal
   #+begin_src emacs-lisp
   (global-set-key (kbd "C-c j") 'org-journal-new-entry)
   (setq org-journal-dir "d:/notes/journal")
   (setq org-journal-date-format "%A, %d %B %Y")
   (setq org-journal-file-format "%F")
   (require 'org-journal)
   #+end_src

** Register
   #+begin_src emacs-lisp
   (set-register ?H '(file . "d:/schedules/home-life.org"))
   #+end_src

* Python
  #+begin_src emacs-lisp
  (require 'eval-in-repl)
  (require 'python) ; if not done elsewhere
  (require 'eval-in-repl-python)
  (add-hook 'python-mode-hook
            '(lambda ()
	    (local-set-key (kbd "<C-return>") 'eir-eval-in-python)))

  (setq-default py-shell-name "d:/envs/emacs/Scripts/python.exe")
  #+end_src

* General

** Setting paths
   #+begin_src emacs-lisp
   (add-to-list 'exec-path "C:/Program Files/Git/usr/bin")
   #+end_src

** yasnippet
   #+begin_src emacs-lisp
   (use-package yasnippet
     :ensure t
     :config
     (use-package yasnippet-snippets
       :ensure t)
     (add-hook 'python-mode-hook #'yas-minor-mode)
     (add-hook 'org-mode-hook #'yas-minor-mode)
     (defun yas/org-very-safe-expand ()
       (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

     (add-hook 'org-mode-hook
               (lambda ()
                 ;; yasnippet (using the new org-cycle hooks)
		 (make-variable-buffer-local 'yas/trigger-key)
		 (setq yas/trigger-key [tab])
		 (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
		 (define-key yas/keymap [tab] 'yas/next-field)))
     (yas-reload-all))
   #+end_src

** Upcase and Downcase
   #+begin_src emacs-lisp
   (put 'upcase-region 'disabled nil)
   (put 'downcase-region 'disabled nil)
   #+end_src

** Tree Sitter
   #+begin_src emacs-lisp
   ;; tree sitter
   ;; (use-package tree-sitter
   ;;   :hook
   ;;   (python-mode . tree-sitter-hl-mode))

   ;; (use-package tree-sitter-langs)
   ;;  :after tree-sitter)
   ;;(require 'tree-sitter)
   ;;(require 'tree-sitter-langs)
   ;; (use-package ts-fold
   ;;   :load-path "~/.emacs.d/elpa/ts-fold/"
   ;;   :after tree-sitter)
   (require 'tree-sitter)
   (require 'tree-sitter-langs)
   #+end_src

